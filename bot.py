"""
Telegram-–±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
"""
import os
import logging
from typing import Dict, List
from datetime import datetime

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

from database import Database
from report_generator import ReportGenerator

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
UPLOAD_PHOTOS, ENTER_ADDRESS, ENTER_ROUTER, ENTER_PORT, ENTER_FIBER, ENTER_TWISTED, SELECT_EMPLOYEES, CONFIRM = range(8)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
MANAGE_ACTION, ADD_EMPLOYEE_NAME, DELETE_EMPLOYEE_SELECT = range(8, 11)

# –û—Ç—á–µ—Ç—ã
SELECT_REPORT_EMPLOYEE, SELECT_REPORT_PERIOD = range(11, 13)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database()

# –ó–∞–≥—Ä—É–∑–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_USER_IDS', '').split(',') if id.strip()]

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
REPORTS_CHANNEL_ID = os.getenv('REPORTS_CHANNEL_ID', '').strip()
if REPORTS_CHANNEL_ID:
    try:
        REPORTS_CHANNEL_ID = int(REPORTS_CHANNEL_ID)
        logger.info(f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {REPORTS_CHANNEL_ID}")
    except ValueError:
        REPORTS_CHANNEL_ID = None
        logger.warning("REPORTS_CHANNEL_ID –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
else:
    REPORTS_CHANNEL_ID = None


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üìù –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")],
        [KeyboardButton("üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")],
        [KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤.

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
‚Ä¢ –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∞–∂–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ Excel

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
/report - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
/manage_employees - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
/help - –°–ø—Ä–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:
"""
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìù –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" –∏–ª–∏ /new
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 10 —à—Ç—É–∫)
3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
5. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ

<b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç" –∏–ª–∏ /report
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥
4. –ü–æ–ª—É—á–∏—Ç–µ Excel-—Ñ–∞–π–ª

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:</b>
(—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
1. –ù–∞–∂–º–∏—Ç–µ "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"
2. –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

<b>–õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∞–∂–∞:</b>
–ú–µ—Ç—Ä–∞–∂ –¥–µ–ª–∏—Ç—Å—è –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏.
–ù–∞–ø—Ä–∏–º–µ—Ä: 100–º –í–û–õ–° –Ω–∞ 2 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π = –ø–æ 50–º –∫–∞–∂–¥–æ–º—É

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    await update.message.reply_text(help_text, parse_mode='HTML')


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


# ==================== –°–û–ó–î–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ====================

async def new_connection_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    context.user_data['photos'] = []
    context.user_data['connection_data'] = {}
    
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data='skip_photos')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üì∏ <b>–®–∞–≥ 1/7: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>

–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–æ 10 —à—Ç—É–∫).
–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".

–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.
"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    return UPLOAD_PHOTOS


async def upload_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if update.message.photo:
        photos = context.user_data.get('photos', [])
        
        if len(photos) >= 10:
            await update.message.reply_text("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return UPLOAD_PHOTOS
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        photo_file_id = update.message.photo[-1].file_id
        photos.append(photo_file_id)
        context.user_data['photos'] = photos
        
        keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue_from_photos')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ {len(photos)}/10 –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.",
            reply_markup=reply_markup
        )
        return UPLOAD_PHOTOS
    
    return UPLOAD_PHOTOS


async def ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    photos_count = len(context.user_data.get('photos', []))
    await query.edit_message_text(
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {photos_count}\n\n"
        f"üìç <b>–®–∞–≥ 2/7: –ê–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞:",
        parse_mode='HTML'
    )
    
    return ENTER_ADDRESS


async def enter_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ —Ä–æ—É—Ç–µ—Ä–∞"""
    address = update.message.text.strip()
    context.user_data['connection_data']['address'] = address
    
    await update.message.reply_text(
        f"‚úÖ –ê–¥—Ä–µ—Å: {address}\n\n"
        f"üåê <b>–®–∞–≥ 3/7: –ú–æ–¥–µ–ª—å —Ä–æ—É—Ç–µ—Ä–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ä–æ—É—Ç–µ—Ä–∞:",
        parse_mode='HTML'
    )
    
    return ENTER_ROUTER


async def enter_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞"""
    router = update.message.text.strip()
    context.user_data['connection_data']['router_model'] = router
    
    await update.message.reply_text(
        f"‚úÖ –†–æ—É—Ç–µ—Ä: {router}\n\n"
        f"üîå <b>–®–∞–≥ 4/7: –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞:",
        parse_mode='HTML'
    )
    
    return ENTER_PORT


async def enter_port(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∞–∂–∞ –í–û–õ–°"""
    port = update.message.text.strip()
    context.user_data['connection_data']['port'] = port
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Ä—Ç: {port}\n\n"
        f"üìè <b>–®–∞–≥ 5/7: –ú–µ—Ç—Ä–∞–∂ –í–û–õ–°</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –í–û–õ–° (–≤–æ–ª–æ–∫–æ–Ω–Ω–æ-–æ–ø—Ç–∏—á–µ—Å–∫–æ–π –ª–∏–Ω–∏–∏ —Å–≤—è–∑–∏):",
        parse_mode='HTML'
    )
    
    return ENTER_FIBER


async def enter_fiber(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∞–∂–∞ –í–û–õ–° –∏ –∑–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∞–∂–∞ –≤–∏—Ç–æ–π –ø–∞—Ä—ã"""
    try:
        fiber_meters = float(update.message.text.strip().replace(',', '.'))
        if fiber_meters < 0:
            raise ValueError
        
        context.user_data['connection_data']['fiber_meters'] = fiber_meters
        
        await update.message.reply_text(
            f"‚úÖ –í–û–õ–°: {fiber_meters} –º\n\n"
            f"üìè <b>–®–∞–≥ 6/7: –ú–µ—Ç—Ä–∞–∂ –≤–∏—Ç–æ–π –ø–∞—Ä—ã</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –≤–∏—Ç–æ–π –ø–∞—Ä—ã:",
            parse_mode='HTML'
        )
        
        return ENTER_TWISTED
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5)"
        )
        return ENTER_FIBER


async def enter_twisted(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∞–∂–∞ –≤–∏—Ç–æ–π –ø–∞—Ä—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        twisted_meters = float(update.message.text.strip().replace(',', '.'))
        if twisted_meters < 0:
            raise ValueError
        
        context.user_data['connection_data']['twisted_pair_meters'] = twisted_meters
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = db.get_all_employees()
        
        if not employees:
            await update.message.reply_text(
                "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        context.user_data['selected_employees'] = []
        keyboard = []
        
        for emp in employees:
            keyboard.append([InlineKeyboardButton(
                f"‚òê {emp['full_name']}", 
                callback_data=f"emp_{emp['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='employees_done')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –í–∏—Ç–∞—è –ø–∞—Ä–∞: {twisted_meters} –º\n\n"
            f"üë• <b>–®–∞–≥ 7/7: –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\n"
            f"(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return SELECT_EMPLOYEES
    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5)"
        )
        return ENTER_TWISTED


async def select_employee_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'employees_done':
        selected = context.user_data.get('selected_employees', [])
        
        if not selected:
            await query.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!", show_alert=True)
            return SELECT_EMPLOYEES
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        return await show_confirmation(update, context)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    emp_id = int(query.data.split('_')[1])
    selected = context.user_data.get('selected_employees', [])
    
    if emp_id in selected:
        selected.remove(emp_id)
    else:
        selected.append(emp_id)
    
    context.user_data['selected_employees'] = selected
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    employees = db.get_all_employees()
    keyboard = []
    
    for emp in employees:
        is_selected = emp['id'] in selected
        checkbox = "‚òë" if is_selected else "‚òê"
        keyboard.append([InlineKeyboardButton(
            f"{checkbox} {emp['full_name']}", 
            callback_data=f"emp_{emp['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='employees_done')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    
    return SELECT_EMPLOYEES


async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    
    data = context.user_data['connection_data']
    photos_count = len(context.user_data.get('photos', []))
    selected_emp_ids = context.user_data.get('selected_employees', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    employees = db.get_all_employees()
    selected_names = [emp['full_name'] for emp in employees if emp['id'] in selected_emp_ids]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –Ω–∞ –∫–∞–∂–¥–æ–≥–æ
    emp_count = len(selected_emp_ids)
    fiber_per_emp = round(data['fiber_meters'] / emp_count, 2)
    twisted_per_emp = round(data['twisted_pair_meters'] / emp_count, 2)
    
    confirmation_text = f"""
üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:</b>

üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}
üìç –ê–¥—Ä–µ—Å: {data['address']}
üåê –†–æ—É—Ç–µ—Ä: {data['router_model']}
üîå –ü–æ—Ä—Ç: {data['port']}
üìè –í–û–õ–°: {data['fiber_meters']} –º
üìè –í–∏—Ç–∞—è –ø–∞—Ä–∞: {data['twisted_pair_meters']} –º

üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ({emp_count}):</b>
{chr(10).join(['‚Ä¢ ' + name for name in selected_names])}

üí° <b>–†–∞—Å—á–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–≥–æ:</b>
‚Ä¢ –í–û–õ–°: {fiber_per_emp} –º
‚Ä¢ –í–∏—Ç–∞—è –ø–∞—Ä–∞: {twisted_per_emp} –º

–í—Å–µ –≤–µ—Ä–Ω–æ?
"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_yes')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='confirm_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return CONFIRM


async def send_connection_report(message, connection_id: int, data: Dict, photos: List[str], employee_ids: List[int]) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = db.get_all_employees()
        employee_names = [emp['full_name'] for emp in employees if emp['id'] in employee_ids]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –Ω–∞ –∫–∞–∂–¥–æ–≥–æ
        emp_count = len(employee_ids)
        fiber_per_emp = round(data['fiber_meters'] / emp_count, 2)
        twisted_per_emp = round(data['twisted_pair_meters'] / emp_count, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        report_text = f"""
üìã <b>–û–¢–ß–ï–¢ –û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò #{connection_id}</b>

üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}
üåê <b>–ú–æ–¥–µ–ª—å —Ä–æ—É—Ç–µ—Ä–∞:</b> {data['router_model']}
üîå <b>–ü–æ—Ä—Ç:</b> {data['port']}

üìè <b>–ü—Ä–æ–ª–æ–∂–µ–Ω–Ω—ã–π –∫–∞–±–µ–ª—å:</b>
  ‚Ä¢ –í–û–õ–°: {data['fiber_meters']} –º
  ‚Ä¢ –í–∏—Ç–∞—è –ø–∞—Ä–∞: {data['twisted_pair_meters']} –º

üë• <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ({emp_count}):</b>
{chr(10).join(['  ‚Ä¢ ' + name for name in employee_names])}

üí° <b>–†–∞—Å—á–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>
  ‚Ä¢ –í–û–õ–°: {fiber_per_emp} –º
  ‚Ä¢ –í–∏—Ç–∞—è –ø–∞—Ä–∞: {twisted_per_emp} –º

üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if photos:
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            media_group = []
            for idx, photo_id in enumerate(photos):
                if idx == 0:
                    # –ö –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    media_group.append(InputMediaPhoto(media=photo_id, caption=report_text, parse_mode='HTML'))
                else:
                    media_group.append(InputMediaPhoto(media=photo_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply_media_group(media=media_group)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç #{connection_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å {len(photos)} —Ñ–æ—Ç–æ")
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await message.reply_text(report_text, parse_mode='HTML')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç #{connection_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ —Ñ–æ—Ç–æ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if REPORTS_CHANNEL_ID:
            try:
                bot = message.get_bot()
                if photos:
                    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
                    channel_media_group = []
                    for idx, photo_id in enumerate(photos):
                        if idx == 0:
                            channel_media_group.append(InputMediaPhoto(media=photo_id, caption=report_text, parse_mode='HTML'))
                        else:
                            channel_media_group.append(InputMediaPhoto(media=photo_id))
                    
                    await bot.send_media_group(chat_id=REPORTS_CHANNEL_ID, media=channel_media_group)
                    logger.info(f"–û—Ç—á–µ—Ç #{connection_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Å {len(photos)} —Ñ–æ—Ç–æ")
                else:
                    await bot.send_message(chat_id=REPORTS_CHANNEL_ID, text=report_text, parse_mode='HTML')
                    logger.info(f"–û—Ç—á–µ—Ç #{connection_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –±–µ–∑ —Ñ–æ—Ç–æ")
            except Exception as channel_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª: {channel_error}")
                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –æ—Ç—á–µ—Ç –µ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        await message.reply_text(
            "‚ö†Ô∏è –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.",
            parse_mode='HTML'
        )


async def confirm_connection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_no':
        context.user_data.clear()
        await query.edit_message_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    data = context.user_data['connection_data']
    photos = context.user_data.get('photos', [])
    selected_employees = context.user_data.get('selected_employees', [])
    user_id = update.effective_user.id
    
    connection_id = db.create_connection(
        address=data['address'],
        router_model=data['router_model'],
        port=data['port'],
        fiber_meters=data['fiber_meters'],
        twisted_pair_meters=data['twisted_pair_meters'],
        employee_ids=selected_employees,
        photo_file_ids=photos,
        created_by=user_id
    )
    
    if connection_id:
        await query.edit_message_text(
            f"‚úÖ <b>–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: #{connection_id}\n"
            f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        await send_connection_report(query.message, connection_id, data, photos, selected_employees)
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
    
    context.user_data.clear()
    return ConversationHandler.END


# ==================== –°–í–û–î–ù–´–ï –û–¢–ß–ï–¢–´ ====================

async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    employees = db.get_all_employees()
    
    if not employees:
        text = "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!"
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(text, reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(text, reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    keyboard = []
    for emp in employees:
        keyboard.append([InlineKeyboardButton(emp['full_name'], callback_data=f"rep_emp_{emp['id']}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='report_cancel')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    return SELECT_REPORT_EMPLOYEE


async def report_select_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'report_cancel':
        await query.edit_message_text("‚ùå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    emp_id = int(query.data.split('_')[2])
    context.user_data['report_employee_id'] = emp_id
    
    employee = db.get_employee_by_id(emp_id)
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data='period_7')],
        [InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data='period_30')],
        [InlineKeyboardButton("üìÖ –í—Å–µ –≤—Ä–µ–º—è", callback_data='period_all')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='period_cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{employee['full_name']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return SELECT_REPORT_PERIOD


async def report_generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'period_cancel':
        await query.edit_message_text("‚ùå –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        context.user_data.clear()
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    period_map = {
        'period_7': (7, '–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è'),
        'period_30': (30, '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'),
        'period_all': (None, '–í—Å–µ –≤—Ä–µ–º—è')
    }
    
    days, period_name = period_map[query.data]
    emp_id = context.user_data['report_employee_id']
    employee = db.get_employee_by_id(emp_id)
    
    await query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    connections, stats = db.get_employee_report(emp_id, days)
    
    if not connections:
        await query.message.reply_text(
            f"‚ÑπÔ∏è –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{employee['full_name']}</b> –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-–æ—Ç—á–µ—Ç
    try:
        filename = ReportGenerator.generate_employee_report(
            employee_name=employee['full_name'],
            connections=connections,
            stats=stats,
            period_name=period_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as file:
            await query.message.reply_document(
                document=file,
                filename=filename,
                caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: <b>{employee['full_name']}</b>\n"
                        f"–ü–µ—Ä–∏–æ–¥: {period_name}\n"
                        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {stats['total_connections']}\n"
                        f"–í–û–õ–°: {stats['total_fiber_meters']} –º\n"
                        f"–í–∏—Ç–∞—è –ø–∞—Ä–∞: {stats['total_twisted_pair_meters']} –º",
                parse_mode='HTML'
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
        await query.message.reply_text(
            "‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    
    context.user_data.clear()
    return ConversationHandler.END


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ====================

async def manage_employees_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        text = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏."
        if update.callback_query:
            await update.callback_query.answer(text, show_alert=True)
            await update.callback_query.message.reply_text(text, reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(text, reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='manage_add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='manage_delete')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='manage_list')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='manage_cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    return MANAGE_ACTION


async def manage_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'manage_cancel':
        await query.edit_message_text("‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    if query.data == 'back_to_manage':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='manage_add')],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='manage_delete')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data='manage_list')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='manage_cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return MANAGE_ACTION
    
    if query.data == 'manage_add':
        await query.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            parse_mode='HTML'
        )
        return ADD_EMPLOYEE_NAME
    
    if query.data == 'manage_delete':
        employees = db.get_all_employees()
        
        if not employees:
            await query.edit_message_text("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
            return ConversationHandler.END
        
        keyboard = []
        for emp in employees:
            keyboard.append([InlineKeyboardButton(
                f"üóë {emp['full_name']}", 
                callback_data=f"del_emp_{emp['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='delete_cancel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return DELETE_EMPLOYEE_SELECT
    
    if query.data == 'manage_list':
        employees = db.get_all_employees()
        
        if not employees:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        else:
            emp_list = '\n'.join([f"{idx}. {emp['full_name']}" for idx, emp in enumerate(employees, 1)])
            text = f"üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ({len(employees)}):</b>\n\n{emp_list}"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_manage')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        return MANAGE_ACTION


async def add_employee_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    full_name = update.message.text.strip()
    
    if len(full_name) < 3:
        await update.message.reply_text("‚ö†Ô∏è –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return ADD_EMPLOYEE_NAME
    
    employee_id = db.add_employee(full_name)
    
    if employee_id:
        await update.message.reply_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{full_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{full_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    return ConversationHandler.END


async def delete_employee_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'delete_cancel':
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return ConversationHandler.END
    
    emp_id = int(query.data.split('_')[2])
    employee = db.get_employee_by_id(emp_id)
    
    if db.delete_employee(emp_id):
        await query.edit_message_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ <b>{employee['full_name']}</b> —É–¥–∞–ª–µ–Ω!",
            parse_mode='HTML'
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
    
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    return ConversationHandler.END


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

async def handle_keyboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    text = update.message.text
    
    if text == "üìù –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ":
        return await new_connection_start(update, context)
    elif text == "üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç":
        return await report_start(update, context)
    elif text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏":
        return await manage_employees_start(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)


# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_conv = ConversationHandler(
        entry_points=[
            CommandHandler('new', new_connection_start),
            MessageHandler(filters.Regex('^üìù –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ$'), new_connection_start)
        ],
        states={
            UPLOAD_PHOTOS: [
                MessageHandler(filters.PHOTO, upload_photos),
                CallbackQueryHandler(ask_address, pattern='^(skip_photos|continue_from_photos)$')
            ],
            ENTER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            ENTER_ROUTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_router)],
            ENTER_PORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_port)],
            ENTER_FIBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_fiber)],
            ENTER_TWISTED: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_twisted)],
            SELECT_EMPLOYEES: [CallbackQueryHandler(select_employee_toggle, pattern='^(emp_|employees_done)')],
            CONFIRM: [CallbackQueryHandler(confirm_connection, pattern='^confirm_')]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤
    report_conv = ConversationHandler(
        entry_points=[
            CommandHandler('report', report_start),
            MessageHandler(filters.Regex('^üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç$'), report_start)
        ],
        states={
            SELECT_REPORT_EMPLOYEE: [CallbackQueryHandler(report_select_period, pattern='^(rep_emp_|report_cancel)')],
            SELECT_REPORT_PERIOD: [CallbackQueryHandler(report_generate, pattern='^(period_|period_cancel)')]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    manage_conv = ConversationHandler(
        entry_points=[
            CommandHandler('manage_employees', manage_employees_start),
            MessageHandler(filters.Regex('^üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏$'), manage_employees_start)
        ],
        states={
            MANAGE_ACTION: [CallbackQueryHandler(manage_action, pattern='^(manage_|back_to_manage)')],
            ADD_EMPLOYEE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_employee_name)],
            DELETE_EMPLOYEE_SELECT: [CallbackQueryHandler(delete_employee_confirm, pattern='^(del_emp_|delete_cancel)')]
        },
        fallbacks=[CommandHandler('cancel', cancel_command)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(connection_conv)
    application.add_handler(report_conv)
    application.add_handler(manage_conv)
    application.add_handler(MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'), help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
